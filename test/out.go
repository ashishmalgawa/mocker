// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: test/in.go

package test

import (
	sync "sync"

	github_com_travisjeffery_mocker_test_a "github.com/travisjeffery/mocker/test/a"
	github_com_travisjeffery_mocker_test_b "github.com/travisjeffery/mocker/test/b"
	github_com_travisjeffery_mocker_test_c "github.com/travisjeffery/mocker/test/c"
)

// MockIface is a mock of Iface interface
type MockIface struct {
	lockOne sync.Mutex
	OneFunc func(str string, variadic ...string) (string, []string)

	lockTwo sync.Mutex
	TwoFunc func(arg0, arg1 int) int

	lockThree sync.Mutex
	ThreeFunc func(arg0 github_com_travisjeffery_mocker_test_a.Int) github_com_travisjeffery_mocker_test_b.Str

	lockFour sync.Mutex
	FourFunc func(arg0 github_com_travisjeffery_mocker_test_c.Int)

	calls struct {
		One []struct {
			Str      string
			Variadic []string
		}
		Two []struct {
			Arg0 int
			Arg1 int
		}
		Three []struct {
			Arg0 github_com_travisjeffery_mocker_test_a.Int
		}
		Four []struct {
			Arg0 github_com_travisjeffery_mocker_test_c.Int
		}
	}
}

// One mocks base method by wrapping the associated func.
func (m *MockIface) One(str string, variadic ...string) (string, []string) {
	m.lockOne.Lock()
	defer m.lockOne.Unlock()

	if m.OneFunc == nil {
		panic("mocker: MockIface.OneFunc is nil but MockIface.One was called.")
	}

	call := struct {
		Str      string
		Variadic []string
	}{
		Str:      str,
		Variadic: variadic,
	}

	m.calls.One = append(m.calls.One, call)

	return m.OneFunc(str, variadic...)
}

// OneCalled returns true if One was called at least once.
func (m *MockIface) OneCalled() bool {
	m.lockOne.Lock()
	defer m.lockOne.Unlock()

	return len(m.calls.One) > 0
}

// OneCalls returns the calls made to One.
func (m *MockIface) OneCalls() []struct {
	Str      string
	Variadic []string
} {
	m.lockOne.Lock()
	defer m.lockOne.Unlock()

	return m.calls.One
}

// Two mocks base method by wrapping the associated func.
func (m *MockIface) Two(arg0, arg1 int) int {
	m.lockTwo.Lock()
	defer m.lockTwo.Unlock()

	if m.TwoFunc == nil {
		panic("mocker: MockIface.TwoFunc is nil but MockIface.Two was called.")
	}

	call := struct {
		Arg0 int
		Arg1 int
	}{
		Arg0: arg0,
		Arg1: arg1,
	}

	m.calls.Two = append(m.calls.Two, call)

	return m.TwoFunc(arg0, arg1)
}

// TwoCalled returns true if Two was called at least once.
func (m *MockIface) TwoCalled() bool {
	m.lockTwo.Lock()
	defer m.lockTwo.Unlock()

	return len(m.calls.Two) > 0
}

// TwoCalls returns the calls made to Two.
func (m *MockIface) TwoCalls() []struct {
	Arg0 int
	Arg1 int
} {
	m.lockTwo.Lock()
	defer m.lockTwo.Unlock()

	return m.calls.Two
}

// Three mocks base method by wrapping the associated func.
func (m *MockIface) Three(arg0 github_com_travisjeffery_mocker_test_a.Int) github_com_travisjeffery_mocker_test_b.Str {
	m.lockThree.Lock()
	defer m.lockThree.Unlock()

	if m.ThreeFunc == nil {
		panic("mocker: MockIface.ThreeFunc is nil but MockIface.Three was called.")
	}

	call := struct {
		Arg0 github_com_travisjeffery_mocker_test_a.Int
	}{
		Arg0: arg0,
	}

	m.calls.Three = append(m.calls.Three, call)

	return m.ThreeFunc(arg0)
}

// ThreeCalled returns true if Three was called at least once.
func (m *MockIface) ThreeCalled() bool {
	m.lockThree.Lock()
	defer m.lockThree.Unlock()

	return len(m.calls.Three) > 0
}

// ThreeCalls returns the calls made to Three.
func (m *MockIface) ThreeCalls() []struct {
	Arg0 github_com_travisjeffery_mocker_test_a.Int
} {
	m.lockThree.Lock()
	defer m.lockThree.Unlock()

	return m.calls.Three
}

// Four mocks base method by wrapping the associated func.
func (m *MockIface) Four(arg0 github_com_travisjeffery_mocker_test_c.Int) {
	m.lockFour.Lock()
	defer m.lockFour.Unlock()

	if m.FourFunc == nil {
		panic("mocker: MockIface.FourFunc is nil but MockIface.Four was called.")
	}

	call := struct {
		Arg0 github_com_travisjeffery_mocker_test_c.Int
	}{
		Arg0: arg0,
	}

	m.calls.Four = append(m.calls.Four, call)

	m.FourFunc(arg0)
}

// FourCalled returns true if Four was called at least once.
func (m *MockIface) FourCalled() bool {
	m.lockFour.Lock()
	defer m.lockFour.Unlock()

	return len(m.calls.Four) > 0
}

// FourCalls returns the calls made to Four.
func (m *MockIface) FourCalls() []struct {
	Arg0 github_com_travisjeffery_mocker_test_c.Int
} {
	m.lockFour.Lock()
	defer m.lockFour.Unlock()

	return m.calls.Four
}

// Reset resets the calls made to the mocked methods.
func (m *MockIface) Reset() {
	m.lockOne.Lock()
	m.calls.One = nil
	m.lockOne.Unlock()
	m.lockTwo.Lock()
	m.calls.Two = nil
	m.lockTwo.Unlock()
	m.lockThree.Lock()
	m.calls.Three = nil
	m.lockThree.Unlock()
	m.lockFour.Lock()
	m.calls.Four = nil
	m.lockFour.Unlock()
}
